
<!--<Window x:Class="HostsPro.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:converters="clr-namespace:HostsPro.Converters"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:viewModels="clr-namespace:HostsPro.ViewModels"
        Title="Hosts Editor" Height="600" Width="800">
    <Window.DataContext>
        <viewModels:EntryViewModel />
    </Window.DataContext>
    <Window.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <Style TargetType="{x:Type FrameworkElement}" x:Key="ValidatingControl">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="ToolTip" Value="{Binding 
            Path=(Validation.Errors)[0].ErrorContent, 
            RelativeSource={x:Static RelativeSource.Self}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="TextBox">
            <Style.Triggers>
                --><!-- Apply this trigger to any TextBox with validation errors --><!--
                <DataTrigger Binding="{Binding Path=(Validation.HasError), RelativeSource={RelativeSource Self}}" Value="True">
                    --><!-- Display the error message as a tooltip --><!--
                    <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)[0].ErrorContent, RelativeSource={RelativeSource Self}}" />
                    --><!-- Set the red border when validation fails --><!--
                    <Setter Property="BorderBrush" Value="Red" />
                    --><!-- Make the border thicker to highlight the error --><!--
                    <Setter Property="BorderThickness" Value="2" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
        <Grid >
        <StackPanel>

            --><!-- Title --><!--
            <TextBlock Text="Hosts File Editor"
                       FontSize="24"
                       FontWeight="Bold"
                       HorizontalAlignment="Center"
                       Margin="0,0,0,20"/>
            <Button Content="➕ Add Entry"
        Width="120"
        HorizontalAlignment="Center"
        Margin="0,0,0,20">
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Add IP Entry" Command="{Binding AddEntryCommand}" CommandParameter="IP"/>
                        <MenuItem Header="Add Comment Entry" Command="{Binding AddEntryCommand}" CommandParameter="Comment"/>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>
            --><!-- List of Entries --><!--
            <ItemsControl ItemsSource="{Binding Entries}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid Width="760" Margin="5">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            --><!-- Comment Block --><!--
                            <TextBox Text="{Binding CommentBlock, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                     Visibility="{Binding IsCommentBlock, Converter={StaticResource BooleanToVisibilityConverter}}"
                                     TextWrapping="Wrap"
                                     AcceptsReturn="True"
                                     VerticalScrollBarVisibility="Auto"
                                     Padding="10,5"
                                     Height="80"
                                     Grid.Column="0"/>

                            --><!-- IP Entry --><!--
                            <Grid Visibility="{Binding IsCommentBlock, Converter={StaticResource InverseBooleanToVisibilityConverter}, Mode=TwoWay}"
                                  Grid.Column="0" Margin="0,0,10,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="100"/>
                                    <ColumnDefinition Width="200"/>
                                </Grid.ColumnDefinitions>

                                --><!-- IsActive Checkbox --><!--
                                <CheckBox Grid.Row="0" Grid.Column="1" IsChecked="{Binding IpEntry.IsActive}" 
                                          Content="Active" />

                                --><!-- IP Address --><!--
                                <TextBlock Grid.Row="1" Grid.Column="0" Text="IP Address:" VerticalAlignment="Center" />
                                <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding IpEntry.IpAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                         Style="{StaticResource {x:Type TextBox}}" />

                                --><!-- DNS --><!--
                                <TextBlock Grid.Row="2" Grid.Column="0" Text="DNS:" VerticalAlignment="Center" />
                                <TextBox Grid.Row="2" Grid.Column="1" Text="{Binding IpEntry.DNS, UpdateSourceTrigger=PropertyChanged}" />

                                --><!-- Routes To --><!--
                                <TextBlock Grid.Row="3" Grid.Column="0" Text="Routes To:" VerticalAlignment="Center" />
                                <TextBox Grid.Row="3" Grid.Column="1" Text="{Binding IpEntry.RoutesTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" LostFocus="RoutesTo_LostFocus"/>

                                --><!-- Comment --><!--
                                <TextBlock Grid.Row="4" Grid.Column="0" Text="Comment:" VerticalAlignment="Center" />
                                <TextBox Grid.Row="4" Grid.Column="1" Text="{Binding IpEntry.Comment}" />
                            </Grid>

                            --><!-- Delete Button (Only One for Both Types) --><!--
                            <Button Content="❌"
                                    Command="{Binding DataContext.DeleteEntryCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                    CommandParameter="{Binding}"
                                    ToolTip="Delete Entry"
                                    Width="30"
                                    Height="30"
                                    Margin="5,0,0,0"
                                    Grid.Column="1" />
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            --><!-- Save Button --><!--
                <Button Content="💾 Save Changes" 
                    Command="{Binding SaveCommand}" 
                    Width="150" 
                    HorizontalAlignment="Center" 
                    Margin="20"/>
            </StackPanel>
    </Grid>
    </ScrollViewer>
</Window>-->
<Window x:Class="HostsPro.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:converters="clr-namespace:HostsPro.Converters"
        xmlns:viewModels="clr-namespace:HostsPro.ViewModels"
        Title="Hosts Editor" Height="600" Width="800">

    <Window.DataContext>
        <viewModels:EntryViewModel />
    </Window.DataContext>

    <Window.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
    </Window.Resources>

    <DockPanel>
        <!-- Toolbar -->
        <ToolBar DockPanel.Dock="Top" Background="LightGray" Padding="5">
            <Button Content="➕ Add Entry" Width="120" Margin="5">
                <Button.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Add IP Entry" Command="{Binding AddEntryCommand}" CommandParameter="IP"/>
                        <MenuItem Header="Add Comment Entry" Command="{Binding AddEntryCommand}" CommandParameter="Comment"/>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <Button Content="💾 Save" Command="{Binding SaveCommand}" Width="100" Margin="5"/>
        </ToolBar>

        <!-- Entries Grid -->
        <ScrollViewer VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Entries}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Border BorderThickness="1" BorderBrush="Gray" Padding="5" Margin="2,0">
                            <!-- Vertical margin added here -->
                            <!-- Parent Grid that holds both the comment block and the IP entry -->
                            <Grid>
                                <!-- Define Grid Columns with * (Star) sizing to make them responsive -->
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="50"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="50"/>
                                </Grid.ColumnDefinitions>

                                <!-- Comment Block (Visible when IsCommentBlock is True) -->
                                <TextBox Text="{Binding CommentBlock, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
                                 Visibility="{Binding IsCommentBlock, Converter={StaticResource BooleanToVisibilityConverter}}"
                                 TextWrapping="Wrap"
                                 Grid.ColumnSpan="3"
                                 AcceptsReturn="True"
                                 VerticalScrollBarVisibility="Auto"
                                 Padding="10,5"
                                 Height="80"
                                 HorizontalAlignment="Stretch" />

                                <!-- IP Entry Row (Visible when IsCommentBlock is False) -->
                                <Grid Grid.ColumnSpan="3" Visibility="{Binding IsCommentBlock, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="30"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>

                                    <!-- IsActive Checkbox -->
                                    <CheckBox Grid.Column="0" IsChecked="{Binding IpEntry.IsActive}" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                                    <!-- IP Address -->
                                    <TextBlock Grid.Column="1" Text="IP:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                    <!-- Added margin to separate label and input -->
                                    <TextBox Grid.Column="2" Text="{Binding IpEntry.IpAddress, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Margin="0,0,5,0"/>
                                    <!-- Added margin for input -->

                                    <!-- Routes To -->
                                    <TextBlock Grid.Column="3" Text="Routes To:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                    <!-- Added margin to separate label and input -->
                                    <TextBox Grid.Column="4" Text="{Binding IpEntry.RoutesTo, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" LostFocus="RoutesTo_LostFocus" HorizontalAlignment="Stretch" Margin="0,0,5,0"/>
                                    <!-- Added margin for input -->

                                    <!-- DNS -->
                                    <TextBlock Grid.Column="5" Text="DNS:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                    <!-- Added margin to separate label and input -->
                                    <TextBox Grid.Column="6" Text="{Binding IpEntry.DNS, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Margin="0,0,5,0"/>
                                    <!-- Added margin for input -->

                                    <TextBlock Grid.Column="7" Text="Comment:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                                    <!-- Added margin to separate label and input -->
                                    <TextBox Grid.Column="8" Text="{Binding IpEntry.Comment, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" Margin="0,0,5,0" MaxLength="60"/>
                                </Grid>

                                <!-- Delete Button -->
                                <Button Grid.Column="4"
                                Content="❌"
                                Command="{Binding DataContext.DeleteEntryCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                                CommandParameter="{Binding}"
                                ToolTip="Delete Entry"
                                Width="30"
                                Height="30"
                                Margin="5,0,0,0"/>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>


    </DockPanel>
</Window>

